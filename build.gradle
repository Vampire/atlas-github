/*
 * Copyright 2017 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

plugins {
    id 'groovy'
    id 'idea'
    id 'maven-publish'
    id 'com.gradle.plugin-publish' version '0.9.7'
    id 'nebula.release' version '5.0.0'
    id 'jacoco'
    id "com.github.kt3k.coveralls" version "2.8.1"
}

group 'net.wooga.gradle'
description = 'Unity3D plugin for Gradle.'

sourceSets {
    integrationTest {
        groovy {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/groovy')
        }
        resources.srcDir 'src/integrationTest/resources'
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

idea.module {
    testSourceDirs += file('src/integrationTest/groovy')
    scopes.TEST.plus += [configurations.integrationTestCompile]
}

pluginBundle {
    website = 'https://github.com/wooga/atlas-github'
    vcsUrl = 'https://github.com/wooga/atlas-github'
    tags = ['github', 'publishing']

    plugins {
        unity {
            id = 'net.wooga.github'
            displayName = 'Gradle Github publishing plugin'
            description = 'This plugin provides tasks and conventions to publish artifacts to github releases'
        }
    }
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude module: 'groovy-all'
    }

    testCompile 'com.netflix.nebula:nebula-test:latest.release'
    testCompile('org.jfrog.artifactory.client:artifactory-java-client-services:+') {
        exclude module: 'logback-classic'
    }

    compile 'org.kohsuke:github-api:latest.release'
    compile 'org.zeroturnaround:zt-zip:1.8'
    compile 'org.apache.tika:tika-core:1.3'
    compile gradleApi()
    compile localGroovy()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

task mergeJacocoReport(type: org.gradle.testing.jacoco.tasks.JacocoMerge) {
    group "Jacoco Report"
    description "Merge Jacoco Code Coverage Report"

    executionData(integrationTest, test)
}

jacocoTestReport {
    dependsOn mergeJacocoReport
    reports {
        xml.enabled = true
        html.enabled = true
    }
    executionData(mergeJacocoReport.outputs)
}

tasks.coveralls {
    onlyIf {System.getenv("CI") && JavaVersion.current().isJava8Compatible()}
}

project.tasks.releaseCheck.dependsOn project.tasks.check
project.tasks.release.dependsOn project.tasks.assemble

project.tasks.final.dependsOn project.tasks.publishPlugins
project.tasks.publishPlugins.mustRunAfter project.tasks.postRelease

project.tasks.snapshot.dependsOn project.tasks.publishToMavenLocal

project.tasks.publishToMavenLocal.mustRunAfter project.tasks.postRelease